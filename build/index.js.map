{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAI,OAAO,GAAG,IAAI,iBAAO,OAAO,CAAC;AAC/B,UAAQ,EAAE,KAAK;AACf,UAAQ,EAAE,IAAI;AACd,OAAK,EAAE,IAAI;AACX,YAAU,EAAE;AACV,UAAM,EAAE,KAAK;GACd;CACF,CAAC,CAAC;;IAEkB,SAAS;AAC5B,WADmB,SAAS,CAChB,MAAM,EAAE;0BADD,SAAS;;AAE1B,QAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACrB,QAAI,CAAC,OAAO,GAAG,2BAAkB,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;GACrF;;eAJkB,SAAS;;qCAMX,OAAO,EAAE,IAAI,EAAE;AAC9B,UAAI,GAAG,YAAA,CAAC;AACR,UAAI,KAAK,GAAG;AACV,iBAAS,EAAE,IAAI,CAAC,GAAG,EAAE;AACrB,aAAK,EAAE,QAAQ,CAAE,IAAI,CAAC,MAAM,EAAE,GAAG,YAAY,EAAG,EAAE,CAAC;OACpD,CAAC;;AAEF,UAAI,IAAI,KAAK,CAAC,EAAE;AACd,YAAI,MAAM,GAAG,iBAAO,UAAU,CAAC,MAAM,CAAC,CAAC;AACvC,YAAI,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;AACnE,aAAK,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC5D,YAAI,OAAO,EAAE;AACX,aAAG,GAAG,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;SACpC;OACF,MAAM;AACL,YAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;AACjE,YAAI,SAAS,GAAG;AACd,oBAAU,EAAE,OAAO,CAAC,UAAU;AAC9B,iBAAO,EAAE,OAAO;SACjB,CAAC;;AAEF,aAAK,CAAC,YAAY,GAAG,KAAK,CAAC;AAC3B,aAAK,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;;AAEvF,YAAI,IAAI,KAAK,CAAC,EAAE;AACd,2BAAE,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;SAC9B;;AAED,WAAG,GAAG,OAAO,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;OACtC;;AAED,aAAO;AACL,WAAG,EAAE,GAAG;AACR,aAAK,EAAE,KAAK;OACb,CAAC;KACH;;;yBAEI,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE;AAC5B,UAAI,OAAO,IAAI,KAAK,UAAU,EAAE;AAC9B,gBAAQ,GAAG,IAAI,CAAC;AAChB,YAAI,GAAG,CAAC,CAAC;OACV;;AAED,UAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;;AAElD,wBAAQ,IAAI,CAAC;AACX,WAAG,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,sBAAY,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC;AAChE,YAAI,EAAE,MAAM,CAAC,GAAG;AAChB,eAAO,EAAE;AACP,wBAAc,EAAE,UAAU;SAC3B;OACF,EAAE,UAAS,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE;AAC/B,gBAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;OACrB,CAAC,CAAC;KACJ;;;2BAEM,QAAQ,EAAE;AACf,UAAI,MAAM,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;AAC5C,YAAM,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;;AAEhE,wBAAQ,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,GAAG,sBAAY,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,UAAS,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE;AACrG,YAAI,GAAG,EAAE;AACP,iBAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;SACtB;;AAED,gBAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,OAAO,KAAK,IAAI,CAAC,CAAA;OAC9C,CAAC,CAAC;KAEJ;;;SA1EkB,SAAS;;;kBAAT,SAAS","file":"index.js","sourcesContent":["import xml2js from 'xml2js';\nimport _ from 'lodash';\nimport crypto from 'crypto';\nimport WXBizMsgCrypt from 'wechat-crypto';\nimport request from 'request';\nimport querystring from 'querystring';\n\nlet builder = new xml2js.Builder({\n  rootName: 'xml',\n  headless: true,\n  cdata: true,\n  renderOpts: {\n    pretty: false\n  }\n});\n\nexport default class Simulator {\n  constructor(config) {\n    this.config = config;\n    this.cryptor = new WXBizMsgCrypt(config.token, config.encodingAESKey, config.appid);\n  }\n\n  getRequestParams(message, mode) {\n    let xml;\n    let query = {\n      timestamp: Date.now(),\n      nonce: parseInt((Math.random() * 100000000000), 10)\n    };\n\n    if (mode === 0) {\n      let shasum = crypto.createHash('sha1');\n      let arr = [this.config.token, query.timestamp, query.nonce].sort();\n      query.signature = shasum.update(arr.join('')).digest('hex');\n      if (message) {\n        xml = builder.buildObject(message);\n      }\n    } else {\n      let encrypt = this.cryptor.encrypt(builder.buildObject(message));\n      let encyptMsg = {\n        ToUserName: message.ToUserName,\n        Encrypt: encrypt\n      };\n\n      query.encrypt_type = 'aes';\n      query.msg_signature = this.cryptor.getSignature(query.timestamp, query.nonce, encrypt);\n\n      if (mode === 1) {\n        _.extend(encyptMsg, message);\n      }\n\n      xml = builder.buildObject(encyptMsg);\n    }\n\n    return {\n      xml: xml,\n      query: query\n    };\n  }\n\n  send(message, mode, callback) {\n    if (typeof mode === 'function') {\n      callback = mode;\n      mode = 1;\n    }\n\n    let params = this.getRequestParams(message, mode);\n\n    request.post({\n      url: this.config.url + '?' + querystring.stringify(params.query),\n      body: params.xml,\n      headers: {\n        'Content-Type': 'text/xml'\n      }\n    }, function(err, response, body) {\n      callback(err, body);\n    });\n  }\n\n  verify(callback) {\n    let params = this.getRequestParams(null, 0);\n    params.query.echostr = Math.random().toString(36).substr(2, 15);\n\n    request.get(this.config.url + '?' + querystring.stringify(params.query), function(err, response, body) {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(null, params.query.echostr === body)\n    });\n\n  }\n}\n"],"sourceRoot":"/source/"}